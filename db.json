{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.507b3a.css","path":"main.507b3a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.507b3a.js","path":"main.507b3a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.fdc4b7.js","path":"mobile.fdc4b7.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7de3e40e8c692a6fb86b62a758d5905e4e911bf8","modified":1505459765982},{"_id":"source/README.md","hash":"12f73659352c9d2bf2238b1dc41dd180fbac5ae5","modified":1505459765982},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1504741484000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1504741484000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1504741484000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1504741484000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1504741484000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1504741484000},{"_id":"themes/yilia/_config.yml","hash":"c45809fd8a21f2c8dac8a535232843b26893a067","modified":1504741484000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1504741484000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1504741484000},{"_id":"source/_posts/Java8-新特性之-lambda-表达式.md","hash":"57057b52701a00dd504a8a9038a161f6a30db3f8","modified":1505475601882},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1505462335467},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1504741484000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1504741484000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1504741484000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1504741484000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1504741484000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1504741484000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1504741484000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1504741484000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1504741484000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1504741484000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1504741484000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1504741484000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1504741484000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1504741484000},{"_id":"themes/yilia/source/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1504741484000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1504741484000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1504741484000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504741484000},{"_id":"themes/yilia/source/main.507b3a.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1504741484000},{"_id":"themes/yilia/source/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"b011d92be321ebe09fa2b3179c08aa435b9d051c","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1504741484000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1504741484000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1504741484000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1504741484000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1504741484000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1504741484000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1504741484000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1504741484000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1504741484000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1504741484000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1504741484000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1504741484000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1504741484000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1504741484000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1504741484000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1504741484000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1504741484000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1504741484000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1504741484000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1504741484000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1504741484000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1504741484000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1504741484000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1504741484000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1504741484000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1504741484000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1504741484000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1504741484000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1504741484000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1504741484000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1504741484000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1504741484000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1504741484000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1504741484000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1504741484000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1504741484000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1504741484000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1504741484000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1504741484000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1504741484000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1504741484000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"7f9599ffd5c5551538e90b97023e7d6c599d1ee6","modified":1504741484000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1504741484000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1504741484000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1504741484000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1504741484000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1504741484000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1504741484000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"e8a35d4497fe1e0f119662ae08bd8404e5dab2a4","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"439f2afa6c3515a7edd67d512aae6eba5b1b0d0b","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"ec71ffc2023cebd933c96bd35a7a23d44a30a422","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1504741484000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1504741484000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1504741484000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1504741484000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1504741484000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1504741484000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1504741484000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1504741484000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1504741484000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1504741484000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1504741484000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1504741484000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1504741484000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1504741484000},{"_id":"public/content.json","hash":"50ee762997f3f8ed6f22f64418f11e191303e48b","modified":1505465104945},{"_id":"public/2017/09/15/Java8-新特性之-lambda-表达式/index.html","hash":"fc1ccb603b4858795ba30b9bd9d3006f07899083","modified":1505475606750},{"_id":"public/2017/09/15/hello-world/index.html","hash":"24884c40ac4c279ed2ff4e908b86a4662df7bf1c","modified":1505465105060},{"_id":"public/archives/index.html","hash":"822f7d09bdc80855a16044d978d03a80d05361a2","modified":1505465105060},{"_id":"public/archives/2017/index.html","hash":"b6efb169ae415209548e5d9d968094c1686bb723","modified":1505465105061},{"_id":"public/archives/2017/09/index.html","hash":"551e9b05ec6f4061ae45f7b86e37ed3a9a5ba278","modified":1505465105061},{"_id":"public/categories/JAVA/index.html","hash":"0b3540cf9d243e60aef92187f94746752d817881","modified":1505465105061},{"_id":"public/categories/JAVA/JAVA8-新特性/index.html","hash":"ed0ba3e1d64eac1e2bce93717965850450e1922d","modified":1505465105061},{"_id":"public/index.html","hash":"e7f3c3be034d3845bcaeef45a096739d455a7c63","modified":1505465105061},{"_id":"public/tags/JAVA8/index.html","hash":"35ca7fca1bbfde55afcaa7714fb28299ab4a2849","modified":1505465105061},{"_id":"public/tags/lambda/index.html","hash":"5ccca4c05abe63c37fe49745eae9015cff94b049","modified":1505465105061},{"_id":"public/CNAME","hash":"7de3e40e8c692a6fb86b62a758d5905e4e911bf8","modified":1505465105068},{"_id":"public/README.md","hash":"12f73659352c9d2bf2238b1dc41dd180fbac5ae5","modified":1505465105068},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1505465105068},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1505465105068},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1505465105068},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1505465105068},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1505465105068},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1505465105068},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1505465105068},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1505465105068},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1505465105068},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1505465105072},{"_id":"public/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1505465105072},{"_id":"public/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1505465105072},{"_id":"public/main.507b3a.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1505465105072}],"Category":[{"name":"JAVA","_id":"cj7ln1x6f0002swps707e0fhu"},{"name":"JAVA8 新特性","parent":"cj7ln1x6f0002swps707e0fhu","_id":"cj7ln1x6j0005swps1enef01v"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-09-15T07:16:05.982Z","updated":"2017-09-15T07:58:55.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ln1x630000swpszxrruf1w","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2><span id=\"quick-start\">Quick Start</span></h2><h3><span id=\"create-a-new-post\">Create a new post</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3><span id=\"run-server\">Run server</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3><span id=\"generate-static-files\">Generate static files</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3><span id=\"deploy-to-remote-sites\">Deploy to remote sites</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Java8 新特性之 lambda 表达式","date":"2017-09-15T07:34:22.000Z","_content":"本篇文章主要讲了在 Java8 中加入的 Java 语言新特性：lambda 表达式，主要分为四部分：lambda 表达式的语法、作用、使用限制以及使用过程中可能会遇到的一些问题，具体 Java 语言是如何实现 lambda 表达式的，以及其  \n在 Java 虚拟机中的表现，在字节码中的表现，我还没有搞太懂，所以在这篇文章中，我们也不会提及。\n<!-----more-------->\n### Java8 加入 lambda 表达式的主要原因\nJava 语言，自从产生开始，就是一种纯面向对象的语言，除了 int, char 等基本数据类型，其他的都是对象，而且 Java 也提供了基本类型的封装类，比如 Integer 等，目的也是为了使其面向对象的特性更加的透彻。这样做虽然\n有好处，但是也有其缺点，就是在 Java 中定义的函数（或者说是方法）不可能独立存在，同时方法也不能够作为参数或者是返回一个方法给实例。在出现 lambda 表达式之前，解决这一问题的主要方法是利用匿名类，比如线程的初\n始化，在 Java8 之前只能这么写：\n```Java\nnew Thread(new Runnable(){\n    @Override\n    public void run() {\n        // Do Something\n    }\n}).start\n```\n其实 thread 中只需要一个 run() 函数，但是必须要声明一个类去包装他，因为在 Java 的世界中，函数无法单独存在。于是，在 Java8 中，提供了一种函数式编程的方法：lambda 表达式。\n### lambda 表达式的语法\n我们先来看几个 lambda 表达式的示例：\n```Java\n// 利用 lambda 表达式实现线程的初始化\nnew Thread(() -> System.out.println(\"hello world\")).start();\n\n// 利用 lambda 表达式在 Swing 中实现监听器\nbutton.addActionListener( (e) -> System.out.println(\"button was clicked\"));\n\n// 利用 lambda 表达式遍历集合类\nlist.foreach((element) -> {\n    System.out.println(\"Travers the list by lambda expression\");\n    // Do Sometion\n})\n```\n在 Java 8 中新加入了 lambda 表达式，其主要的语法分为三种：\n```Java\n(params) -> expression;\n(params) -> statement;\n(params) -> { statements; }\n```\nlambda 表达式的主要结构描述如下：\n + 一个 lambda 表达式可以有一个或多个参数；\n + 参数类型可以在代码中显示声明，也可以根据上下文来进行推断；\n + 所有参数要放在圆括号中，通过逗号间隔（和函数参数相同）,括号中内容为空时表示没有参数；\n + 当只有一个参数，并且参数陈类型可以推导时，可以省略圆括号；\n + lambda 表达式的主体可以包含有零个、一个或者多个语句；\n + 当主体只有一个表达式时，花括号可以省略，匿名函数的返回类型与该主体表达式一致；\n + 当主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空\n\n### 函数式接口\n函数式接口指的是只包含一个抽象方法声明的接口，比如 `java.lang.Runnable` 就是一个典型的函数式接口，只包含一个方法 `void run()`。在 Java8 之前，我们需要使用匿名内部类来实例化函数式接口的对象，在 Java 8 增\n加了 lambda 表达式以后，可以将这一操作进行简化，使用 lambda 表达式来对函数式接口进行赋值，例如，我们可以使用 lambda 表达式来创建一个 Runnable 的引用：\n```Java\nRunnable r = () -> System.out.println(\"hello world\");\n```\n在 Java 8 中，加入了一个新的注解 `@FunctionalInterface`,这个注解可以用来指明一个接口是函数式接口，这个接口只能有一个抽象方法，如果有两个抽象方法，那么编译器会报错。在定义了这个函数式接口以后，我们可以在 \nAPI 中使用他，并且使用 lambda 表达式，下面是一个比较长的例子：\n```Java\npublic class Test {\n\n    //定义一个函数式接口\n    @FunctionalInterface\n    public interface WorkerInterface {\n        public void doSomeWork();\n    }\n\n    public class WorkerInterfaceTest {\n        public static void execute(WorkerInterface worker) {\n        worker.doSomeWork();\n    }\n\n    public static void main(String [] args) {\n\n        //invoke doSomeWork using Annonymous class\n        execute(new WorkerInterface() {\n            @Override\n            public void doSomeWork() {\n                System.out.println(\"Worker invoked using Anonymous class\");\n            }\n        });\n        \n        //invoke doSomeWork using Lambda expression \n        execute( () -> System.out.println(\"Worker invoked using Lambda expression\") );\n    }\n}\n```\n运行的输出如下：\n```\nWorker invoked using Anonymous class \nWorker invoked using Lambda expression\n```\n\n### lambda 表达式的作用\n在 Java 8 引入 lambda 表达式以后，我们可以利用其做如下的功能：\n 1. 替换匿名类的实现，比如 `Runnable` 和 `Listener`；\n 2. 对列表类(`Collections`)进行迭代操作，同时可以加入方法引用（将会在写文章另说）；\n 3. 利用函数式接口，简化代码；\n 4. 使用流 API 进行 Map 和 Reduce 操作，进行过滤。\n其中，lambda 表达式与匿名类实现有所不同的是在 lambda 表达式中，this 关键字指向的是外部类的引，同时 Java 编译器将把 lambda 表达式编译成类的私有方法。\n\n### lambda 表达式的使用限制\n 1. lambda 表达式仅能放入如下代码：预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法或者是 SAM（Single Abstract Method）类型。\n 2. lambda 表达式内可以使用方法引用，仅当该方法不修改 lambda 表达式提供的参数。\n 3. lambda 内部可以使用静态、非静态和局部变量。\n 4. lambda 表达式在 Java 中又称为闭包或者是匿名函数。\n 5. lambda 表达式有个限制，就是只能引用 final 或 final 局部变量，不能在 lambda 内部修改定义在域外的变量；但是只访问，不修改是可以的。\n \n### lambda 表达式在使用过程中的一些问题\n 1. lambda 表达式需要一个返回值，如果只有一个表达式，那么编译器会自动返回这个表达式的值，如果有大括号，则需要显式指明返回什么数值。\n 2. 不能够在 lambda 内部修改定义在域外的变量，否则会编译错误。\n 3. lambda 表达式中的 final 指两种，一种是定义为 final ，另外一种是没有在外部被更改，可以推断成 final 的变量。\n对于第三种情况，这里举个例子来详细解释一下：\n```Java\nfinal List<Integer> a = new ArrayList();        // a 可以用在 lambda 表达式中，因为是 final 变量\nList<Integer> b = new ArrayList();              // b 可以用在 lambda 表达式中，因为 b 可以推断为 final 变量\nb = a;                                          // 此时 b 不能用在 lambda 表达式中，因为赋值语句破坏了 b 的 final 属性\nb.foreach(inta -> a.add(inta))                  // 这样是允许的，因为列表的 add 操作并不会修改链表本身的值（考虑 Java 虚拟机实现）\nfinal Integer intb;\nb.foreach(inta -> intb = inta)                  // 错误，lambda 表达式不能修改外部的值\nb.foreach(inta -> inta = intb)                  // 正确，lambda 表达式可以修改内部的值\n```\n\n### 总结\nlambda 表达式是 Java 8 引入的新特性，但是其并没有影响 Java 语言的实现，说到底，lambda 表达式只是一个语法糖，提高大家写代码的速度和效率，同时为大家提供便利。\nlambda 表达式是编程模型上的一种提升，赋予了 Java 缺失的函数式编程的特性。\n\n#### 参考\n 1. [深入浅出 Java 8 Lambda 表达式](http://blog.oneapm.com/apm-tech/226.html)\n 2. [Java 8: The First Taste of Lambdas](https://zeroturnaround.com/rebellabs/java-8-the-first-taste-of-lambdas/)\n 3. [Java8 Lambda表达式](http://www.jianshu.com/p/141cf822cb70)","source":"_posts/Java8-新特性之-lambda-表达式.md","raw":"---\ntitle: Java8 新特性之 lambda 表达式\ndate: 2017-09-15 15:34:22\ncategories:\n- JAVA\n- JAVA8 新特性\ntags:\n- JAVA8\n- lambda\n---\n本篇文章主要讲了在 Java8 中加入的 Java 语言新特性：lambda 表达式，主要分为四部分：lambda 表达式的语法、作用、使用限制以及使用过程中可能会遇到的一些问题，具体 Java 语言是如何实现 lambda 表达式的，以及其  \n在 Java 虚拟机中的表现，在字节码中的表现，我还没有搞太懂，所以在这篇文章中，我们也不会提及。\n<!-----more-------->\n### Java8 加入 lambda 表达式的主要原因\nJava 语言，自从产生开始，就是一种纯面向对象的语言，除了 int, char 等基本数据类型，其他的都是对象，而且 Java 也提供了基本类型的封装类，比如 Integer 等，目的也是为了使其面向对象的特性更加的透彻。这样做虽然\n有好处，但是也有其缺点，就是在 Java 中定义的函数（或者说是方法）不可能独立存在，同时方法也不能够作为参数或者是返回一个方法给实例。在出现 lambda 表达式之前，解决这一问题的主要方法是利用匿名类，比如线程的初\n始化，在 Java8 之前只能这么写：\n```Java\nnew Thread(new Runnable(){\n    @Override\n    public void run() {\n        // Do Something\n    }\n}).start\n```\n其实 thread 中只需要一个 run() 函数，但是必须要声明一个类去包装他，因为在 Java 的世界中，函数无法单独存在。于是，在 Java8 中，提供了一种函数式编程的方法：lambda 表达式。\n### lambda 表达式的语法\n我们先来看几个 lambda 表达式的示例：\n```Java\n// 利用 lambda 表达式实现线程的初始化\nnew Thread(() -> System.out.println(\"hello world\")).start();\n\n// 利用 lambda 表达式在 Swing 中实现监听器\nbutton.addActionListener( (e) -> System.out.println(\"button was clicked\"));\n\n// 利用 lambda 表达式遍历集合类\nlist.foreach((element) -> {\n    System.out.println(\"Travers the list by lambda expression\");\n    // Do Sometion\n})\n```\n在 Java 8 中新加入了 lambda 表达式，其主要的语法分为三种：\n```Java\n(params) -> expression;\n(params) -> statement;\n(params) -> { statements; }\n```\nlambda 表达式的主要结构描述如下：\n + 一个 lambda 表达式可以有一个或多个参数；\n + 参数类型可以在代码中显示声明，也可以根据上下文来进行推断；\n + 所有参数要放在圆括号中，通过逗号间隔（和函数参数相同）,括号中内容为空时表示没有参数；\n + 当只有一个参数，并且参数陈类型可以推导时，可以省略圆括号；\n + lambda 表达式的主体可以包含有零个、一个或者多个语句；\n + 当主体只有一个表达式时，花括号可以省略，匿名函数的返回类型与该主体表达式一致；\n + 当主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空\n\n### 函数式接口\n函数式接口指的是只包含一个抽象方法声明的接口，比如 `java.lang.Runnable` 就是一个典型的函数式接口，只包含一个方法 `void run()`。在 Java8 之前，我们需要使用匿名内部类来实例化函数式接口的对象，在 Java 8 增\n加了 lambda 表达式以后，可以将这一操作进行简化，使用 lambda 表达式来对函数式接口进行赋值，例如，我们可以使用 lambda 表达式来创建一个 Runnable 的引用：\n```Java\nRunnable r = () -> System.out.println(\"hello world\");\n```\n在 Java 8 中，加入了一个新的注解 `@FunctionalInterface`,这个注解可以用来指明一个接口是函数式接口，这个接口只能有一个抽象方法，如果有两个抽象方法，那么编译器会报错。在定义了这个函数式接口以后，我们可以在 \nAPI 中使用他，并且使用 lambda 表达式，下面是一个比较长的例子：\n```Java\npublic class Test {\n\n    //定义一个函数式接口\n    @FunctionalInterface\n    public interface WorkerInterface {\n        public void doSomeWork();\n    }\n\n    public class WorkerInterfaceTest {\n        public static void execute(WorkerInterface worker) {\n        worker.doSomeWork();\n    }\n\n    public static void main(String [] args) {\n\n        //invoke doSomeWork using Annonymous class\n        execute(new WorkerInterface() {\n            @Override\n            public void doSomeWork() {\n                System.out.println(\"Worker invoked using Anonymous class\");\n            }\n        });\n        \n        //invoke doSomeWork using Lambda expression \n        execute( () -> System.out.println(\"Worker invoked using Lambda expression\") );\n    }\n}\n```\n运行的输出如下：\n```\nWorker invoked using Anonymous class \nWorker invoked using Lambda expression\n```\n\n### lambda 表达式的作用\n在 Java 8 引入 lambda 表达式以后，我们可以利用其做如下的功能：\n 1. 替换匿名类的实现，比如 `Runnable` 和 `Listener`；\n 2. 对列表类(`Collections`)进行迭代操作，同时可以加入方法引用（将会在写文章另说）；\n 3. 利用函数式接口，简化代码；\n 4. 使用流 API 进行 Map 和 Reduce 操作，进行过滤。\n其中，lambda 表达式与匿名类实现有所不同的是在 lambda 表达式中，this 关键字指向的是外部类的引，同时 Java 编译器将把 lambda 表达式编译成类的私有方法。\n\n### lambda 表达式的使用限制\n 1. lambda 表达式仅能放入如下代码：预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法或者是 SAM（Single Abstract Method）类型。\n 2. lambda 表达式内可以使用方法引用，仅当该方法不修改 lambda 表达式提供的参数。\n 3. lambda 内部可以使用静态、非静态和局部变量。\n 4. lambda 表达式在 Java 中又称为闭包或者是匿名函数。\n 5. lambda 表达式有个限制，就是只能引用 final 或 final 局部变量，不能在 lambda 内部修改定义在域外的变量；但是只访问，不修改是可以的。\n \n### lambda 表达式在使用过程中的一些问题\n 1. lambda 表达式需要一个返回值，如果只有一个表达式，那么编译器会自动返回这个表达式的值，如果有大括号，则需要显式指明返回什么数值。\n 2. 不能够在 lambda 内部修改定义在域外的变量，否则会编译错误。\n 3. lambda 表达式中的 final 指两种，一种是定义为 final ，另外一种是没有在外部被更改，可以推断成 final 的变量。\n对于第三种情况，这里举个例子来详细解释一下：\n```Java\nfinal List<Integer> a = new ArrayList();        // a 可以用在 lambda 表达式中，因为是 final 变量\nList<Integer> b = new ArrayList();              // b 可以用在 lambda 表达式中，因为 b 可以推断为 final 变量\nb = a;                                          // 此时 b 不能用在 lambda 表达式中，因为赋值语句破坏了 b 的 final 属性\nb.foreach(inta -> a.add(inta))                  // 这样是允许的，因为列表的 add 操作并不会修改链表本身的值（考虑 Java 虚拟机实现）\nfinal Integer intb;\nb.foreach(inta -> intb = inta)                  // 错误，lambda 表达式不能修改外部的值\nb.foreach(inta -> inta = intb)                  // 正确，lambda 表达式可以修改内部的值\n```\n\n### 总结\nlambda 表达式是 Java 8 引入的新特性，但是其并没有影响 Java 语言的实现，说到底，lambda 表达式只是一个语法糖，提高大家写代码的速度和效率，同时为大家提供便利。\nlambda 表达式是编程模型上的一种提升，赋予了 Java 缺失的函数式编程的特性。\n\n#### 参考\n 1. [深入浅出 Java 8 Lambda 表达式](http://blog.oneapm.com/apm-tech/226.html)\n 2. [Java 8: The First Taste of Lambdas](https://zeroturnaround.com/rebellabs/java-8-the-first-taste-of-lambdas/)\n 3. [Java8 Lambda表达式](http://www.jianshu.com/p/141cf822cb70)","slug":"Java8-新特性之-lambda-表达式","published":1,"updated":"2017-09-15T11:40:01.882Z","_id":"cj7ln1x6a0001swps0skwgclt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本篇文章主要讲了在 Java8 中加入的 Java 语言新特性：lambda 表达式，主要分为四部分：lambda 表达式的语法、作用、使用限制以及使用过程中可能会遇到的一些问题，具体 Java 语言是如何实现 lambda 表达式的，以及其<br>在 Java 虚拟机中的表现，在字节码中的表现，我还没有搞太懂，所以在这篇文章中，我们也不会提及。<br><a id=\"more\"></a></p>\n<h3><span id=\"java8-加入-lambda-表达式的主要原因\">Java8 加入 lambda 表达式的主要原因</span></h3><p>Java 语言，自从产生开始，就是一种纯面向对象的语言，除了 int, char 等基本数据类型，其他的都是对象，而且 Java 也提供了基本类型的封装类，比如 Integer 等，目的也是为了使其面向对象的特性更加的透彻。这样做虽然<br>有好处，但是也有其缺点，就是在 Java 中定义的函数（或者说是方法）不可能独立存在，同时方法也不能够作为参数或者是返回一个方法给实例。在出现 lambda 表达式之前，解决这一问题的主要方法是利用匿名类，比如线程的初<br>始化，在 Java8 之前只能这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Do Something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;).start</div></pre></td></tr></table></figure></p>\n<p>其实 thread 中只需要一个 run() 函数，但是必须要声明一个类去包装他，因为在 Java 的世界中，函数无法单独存在。于是，在 Java8 中，提供了一种函数式编程的方法：lambda 表达式。</p>\n<h3><span id=\"lambda-表达式的语法\">lambda 表达式的语法</span></h3><p>我们先来看几个 lambda 表达式的示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 利用 lambda 表达式实现线程的初始化</span></div><div class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"hello world\"</span>)).start();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 利用 lambda 表达式在 Swing 中实现监听器</span></div><div class=\"line\">button.addActionListener( (e) -&gt; System.out.println(<span class=\"string\">\"button was clicked\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 利用 lambda 表达式遍历集合类</span></div><div class=\"line\">list.foreach((element) -&gt; &#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Travers the list by lambda expression\"</span>);</div><div class=\"line\">    <span class=\"comment\">// Do Sometion</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在 Java 8 中新加入了 lambda 表达式，其主要的语法分为三种：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(params) -&gt; expression;</div><div class=\"line\">(params) -&gt; statement;</div><div class=\"line\">(params) -&gt; &#123; statements; &#125;</div></pre></td></tr></table></figure></p>\n<p>lambda 表达式的主要结构描述如下：</p>\n<ul>\n<li>一个 lambda 表达式可以有一个或多个参数；</li>\n<li>参数类型可以在代码中显示声明，也可以根据上下文来进行推断；</li>\n<li>所有参数要放在圆括号中，通过逗号间隔（和函数参数相同）,括号中内容为空时表示没有参数；</li>\n<li>当只有一个参数，并且参数陈类型可以推导时，可以省略圆括号；</li>\n<li>lambda 表达式的主体可以包含有零个、一个或者多个语句；</li>\n<li>当主体只有一个表达式时，花括号可以省略，匿名函数的返回类型与该主体表达式一致；</li>\n<li>当主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空</li>\n</ul>\n<h3><span id=\"函数式接口\">函数式接口</span></h3><p>函数式接口指的是只包含一个抽象方法声明的接口，比如 <code>java.lang.Runnable</code> 就是一个典型的函数式接口，只包含一个方法 <code>void run()</code>。在 Java8 之前，我们需要使用匿名内部类来实例化函数式接口的对象，在 Java 8 增<br>加了 lambda 表达式以后，可以将这一操作进行简化，使用 lambda 表达式来对函数式接口进行赋值，例如，我们可以使用 lambda 表达式来创建一个 Runnable 的引用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable r = () -&gt; System.out.println(<span class=\"string\">\"hello world\"</span>);</div></pre></td></tr></table></figure></p>\n<p>在 Java 8 中，加入了一个新的注解 <code>@FunctionalInterface</code>,这个注解可以用来指明一个接口是函数式接口，这个接口只能有一个抽象方法，如果有两个抽象方法，那么编译器会报错。在定义了这个函数式接口以后，我们可以在<br>API 中使用他，并且使用 lambda 表达式，下面是一个比较长的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义一个函数式接口</span></div><div class=\"line\">    <span class=\"meta\">@FunctionalInterface</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WorkerInterface</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeWork</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerInterfaceTest</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(WorkerInterface worker)</span> </span>&#123;</div><div class=\"line\">        worker.doSomeWork();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String [] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//invoke doSomeWork using Annonymous class</span></div><div class=\"line\">        execute(<span class=\"keyword\">new</span> WorkerInterface() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeWork</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Worker invoked using Anonymous class\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//invoke doSomeWork using Lambda expression </span></div><div class=\"line\">        execute( () -&gt; System.out.println(<span class=\"string\">\"Worker invoked using Lambda expression\"</span>) );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行的输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Worker invoked using Anonymous class </div><div class=\"line\">Worker invoked using Lambda expression</div></pre></td></tr></table></figure></p>\n<h3><span id=\"lambda-表达式的作用\">lambda 表达式的作用</span></h3><p>在 Java 8 引入 lambda 表达式以后，我们可以利用其做如下的功能：</p>\n<ol>\n<li>替换匿名类的实现，比如 <code>Runnable</code> 和 <code>Listener</code>；</li>\n<li>对列表类(<code>Collections</code>)进行迭代操作，同时可以加入方法引用（将会在写文章另说）；</li>\n<li>利用函数式接口，简化代码；</li>\n<li>使用流 API 进行 Map 和 Reduce 操作，进行过滤。<br>其中，lambda 表达式与匿名类实现有所不同的是在 lambda 表达式中，this 关键字指向的是外部类的引，同时 Java 编译器将把 lambda 表达式编译成类的私有方法。</li>\n</ol>\n<h3><span id=\"lambda-表达式的使用限制\">lambda 表达式的使用限制</span></h3><ol>\n<li>lambda 表达式仅能放入如下代码：预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法或者是 SAM（Single Abstract Method）类型。</li>\n<li>lambda 表达式内可以使用方法引用，仅当该方法不修改 lambda 表达式提供的参数。</li>\n<li>lambda 内部可以使用静态、非静态和局部变量。</li>\n<li>lambda 表达式在 Java 中又称为闭包或者是匿名函数。</li>\n<li>lambda 表达式有个限制，就是只能引用 final 或 final 局部变量，不能在 lambda 内部修改定义在域外的变量；但是只访问，不修改是可以的。</li>\n</ol>\n<h3><span id=\"lambda-表达式在使用过程中的一些问题\">lambda 表达式在使用过程中的一些问题</span></h3><ol>\n<li>lambda 表达式需要一个返回值，如果只有一个表达式，那么编译器会自动返回这个表达式的值，如果有大括号，则需要显式指明返回什么数值。</li>\n<li>不能够在 lambda 内部修改定义在域外的变量，否则会编译错误。</li>\n<li>lambda 表达式中的 final 指两种，一种是定义为 final ，另外一种是没有在外部被更改，可以推断成 final 的变量。<br>对于第三种情况，这里举个例子来详细解释一下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> List&lt;Integer&gt; a = <span class=\"keyword\">new</span> ArrayList();        <span class=\"comment\">// a 可以用在 lambda 表达式中，因为是 final 变量</span></div><div class=\"line\">List&lt;Integer&gt; b = <span class=\"keyword\">new</span> ArrayList();              <span class=\"comment\">// b 可以用在 lambda 表达式中，因为 b 可以推断为 final 变量</span></div><div class=\"line\">b = a;                                          <span class=\"comment\">// 此时 b 不能用在 lambda 表达式中，因为赋值语句破坏了 b 的 final 属性</span></div><div class=\"line\">b.foreach(inta -&gt; a.add(inta))                  <span class=\"comment\">// 这样是允许的，因为列表的 add 操作并不会修改链表本身的值（考虑 Java 虚拟机实现）</span></div><div class=\"line\"><span class=\"keyword\">final</span> Integer intb;</div><div class=\"line\">b.foreach(inta -&gt; intb = inta)                  <span class=\"comment\">// 错误，lambda 表达式不能修改外部的值</span></div><div class=\"line\">b.foreach(inta -&gt; inta = intb)                  <span class=\"comment\">// 正确，lambda 表达式可以修改内部的值</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3><span id=\"总结\">总结</span></h3><p>lambda 表达式是 Java 8 引入的新特性，但是其并没有影响 Java 语言的实现，说到底，lambda 表达式只是一个语法糖，提高大家写代码的速度和效率，同时为大家提供便利。<br>lambda 表达式是编程模型上的一种提升，赋予了 Java 缺失的函数式编程的特性。</p>\n<h4><span id=\"参考\">参考</span></h4><ol>\n<li><a href=\"http://blog.oneapm.com/apm-tech/226.html\" target=\"_blank\" rel=\"external\">深入浅出 Java 8 Lambda 表达式</a></li>\n<li><a href=\"https://zeroturnaround.com/rebellabs/java-8-the-first-taste-of-lambdas/\" target=\"_blank\" rel=\"external\">Java 8: The First Taste of Lambdas</a></li>\n<li><a href=\"http://www.jianshu.com/p/141cf822cb70\" target=\"_blank\" rel=\"external\">Java8 Lambda表达式</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>本篇文章主要讲了在 Java8 中加入的 Java 语言新特性：lambda 表达式，主要分为四部分：lambda 表达式的语法、作用、使用限制以及使用过程中可能会遇到的一些问题，具体 Java 语言是如何实现 lambda 表达式的，以及其<br>在 Java 虚拟机中的表现，在字节码中的表现，我还没有搞太懂，所以在这篇文章中，我们也不会提及。<br>","more":"</p>\n<h3 id=\"Java8-加入-lambda-表达式的主要原因\"><a href=\"#Java8-加入-lambda-表达式的主要原因\" class=\"headerlink\" title=\"Java8 加入 lambda 表达式的主要原因\"></a>Java8 加入 lambda 表达式的主要原因</h3><p>Java 语言，自从产生开始，就是一种纯面向对象的语言，除了 int, char 等基本数据类型，其他的都是对象，而且 Java 也提供了基本类型的封装类，比如 Integer 等，目的也是为了使其面向对象的特性更加的透彻。这样做虽然<br>有好处，但是也有其缺点，就是在 Java 中定义的函数（或者说是方法）不可能独立存在，同时方法也不能够作为参数或者是返回一个方法给实例。在出现 lambda 表达式之前，解决这一问题的主要方法是利用匿名类，比如线程的初<br>始化，在 Java8 之前只能这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Do Something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;).start</div></pre></td></tr></table></figure></p>\n<p>其实 thread 中只需要一个 run() 函数，但是必须要声明一个类去包装他，因为在 Java 的世界中，函数无法单独存在。于是，在 Java8 中，提供了一种函数式编程的方法：lambda 表达式。</p>\n<h3 id=\"lambda-表达式的语法\"><a href=\"#lambda-表达式的语法\" class=\"headerlink\" title=\"lambda 表达式的语法\"></a>lambda 表达式的语法</h3><p>我们先来看几个 lambda 表达式的示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 利用 lambda 表达式实现线程的初始化</span></div><div class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"hello world\"</span>)).start();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 利用 lambda 表达式在 Swing 中实现监听器</span></div><div class=\"line\">button.addActionListener( (e) -&gt; System.out.println(<span class=\"string\">\"button was clicked\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 利用 lambda 表达式遍历集合类</span></div><div class=\"line\">list.foreach((element) -&gt; &#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Travers the list by lambda expression\"</span>);</div><div class=\"line\">    <span class=\"comment\">// Do Sometion</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在 Java 8 中新加入了 lambda 表达式，其主要的语法分为三种：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(params) -&gt; expression;</div><div class=\"line\">(params) -&gt; statement;</div><div class=\"line\">(params) -&gt; &#123; statements; &#125;</div></pre></td></tr></table></figure></p>\n<p>lambda 表达式的主要结构描述如下：</p>\n<ul>\n<li>一个 lambda 表达式可以有一个或多个参数；</li>\n<li>参数类型可以在代码中显示声明，也可以根据上下文来进行推断；</li>\n<li>所有参数要放在圆括号中，通过逗号间隔（和函数参数相同）,括号中内容为空时表示没有参数；</li>\n<li>当只有一个参数，并且参数陈类型可以推导时，可以省略圆括号；</li>\n<li>lambda 表达式的主体可以包含有零个、一个或者多个语句；</li>\n<li>当主体只有一个表达式时，花括号可以省略，匿名函数的返回类型与该主体表达式一致；</li>\n<li>当主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空</li>\n</ul>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>函数式接口指的是只包含一个抽象方法声明的接口，比如 <code>java.lang.Runnable</code> 就是一个典型的函数式接口，只包含一个方法 <code>void run()</code>。在 Java8 之前，我们需要使用匿名内部类来实例化函数式接口的对象，在 Java 8 增<br>加了 lambda 表达式以后，可以将这一操作进行简化，使用 lambda 表达式来对函数式接口进行赋值，例如，我们可以使用 lambda 表达式来创建一个 Runnable 的引用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable r = () -&gt; System.out.println(<span class=\"string\">\"hello world\"</span>);</div></pre></td></tr></table></figure></p>\n<p>在 Java 8 中，加入了一个新的注解 <code>@FunctionalInterface</code>,这个注解可以用来指明一个接口是函数式接口，这个接口只能有一个抽象方法，如果有两个抽象方法，那么编译器会报错。在定义了这个函数式接口以后，我们可以在<br>API 中使用他，并且使用 lambda 表达式，下面是一个比较长的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义一个函数式接口</span></div><div class=\"line\">    <span class=\"meta\">@FunctionalInterface</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WorkerInterface</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeWork</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerInterfaceTest</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(WorkerInterface worker)</span> </span>&#123;</div><div class=\"line\">        worker.doSomeWork();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String [] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//invoke doSomeWork using Annonymous class</span></div><div class=\"line\">        execute(<span class=\"keyword\">new</span> WorkerInterface() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeWork</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Worker invoked using Anonymous class\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//invoke doSomeWork using Lambda expression </span></div><div class=\"line\">        execute( () -&gt; System.out.println(<span class=\"string\">\"Worker invoked using Lambda expression\"</span>) );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行的输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Worker invoked using Anonymous class </div><div class=\"line\">Worker invoked using Lambda expression</div></pre></td></tr></table></figure></p>\n<h3 id=\"lambda-表达式的作用\"><a href=\"#lambda-表达式的作用\" class=\"headerlink\" title=\"lambda 表达式的作用\"></a>lambda 表达式的作用</h3><p>在 Java 8 引入 lambda 表达式以后，我们可以利用其做如下的功能：</p>\n<ol>\n<li>替换匿名类的实现，比如 <code>Runnable</code> 和 <code>Listener</code>；</li>\n<li>对列表类(<code>Collections</code>)进行迭代操作，同时可以加入方法引用（将会在写文章另说）；</li>\n<li>利用函数式接口，简化代码；</li>\n<li>使用流 API 进行 Map 和 Reduce 操作，进行过滤。<br>其中，lambda 表达式与匿名类实现有所不同的是在 lambda 表达式中，this 关键字指向的是外部类的引，同时 Java 编译器将把 lambda 表达式编译成类的私有方法。</li>\n</ol>\n<h3 id=\"lambda-表达式的使用限制\"><a href=\"#lambda-表达式的使用限制\" class=\"headerlink\" title=\"lambda 表达式的使用限制\"></a>lambda 表达式的使用限制</h3><ol>\n<li>lambda 表达式仅能放入如下代码：预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法或者是 SAM（Single Abstract Method）类型。</li>\n<li>lambda 表达式内可以使用方法引用，仅当该方法不修改 lambda 表达式提供的参数。</li>\n<li>lambda 内部可以使用静态、非静态和局部变量。</li>\n<li>lambda 表达式在 Java 中又称为闭包或者是匿名函数。</li>\n<li>lambda 表达式有个限制，就是只能引用 final 或 final 局部变量，不能在 lambda 内部修改定义在域外的变量；但是只访问，不修改是可以的。</li>\n</ol>\n<h3 id=\"lambda-表达式在使用过程中的一些问题\"><a href=\"#lambda-表达式在使用过程中的一些问题\" class=\"headerlink\" title=\"lambda 表达式在使用过程中的一些问题\"></a>lambda 表达式在使用过程中的一些问题</h3><ol>\n<li>lambda 表达式需要一个返回值，如果只有一个表达式，那么编译器会自动返回这个表达式的值，如果有大括号，则需要显式指明返回什么数值。</li>\n<li>不能够在 lambda 内部修改定义在域外的变量，否则会编译错误。</li>\n<li>lambda 表达式中的 final 指两种，一种是定义为 final ，另外一种是没有在外部被更改，可以推断成 final 的变量。<br>对于第三种情况，这里举个例子来详细解释一下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> List&lt;Integer&gt; a = <span class=\"keyword\">new</span> ArrayList();        <span class=\"comment\">// a 可以用在 lambda 表达式中，因为是 final 变量</span></div><div class=\"line\">List&lt;Integer&gt; b = <span class=\"keyword\">new</span> ArrayList();              <span class=\"comment\">// b 可以用在 lambda 表达式中，因为 b 可以推断为 final 变量</span></div><div class=\"line\">b = a;                                          <span class=\"comment\">// 此时 b 不能用在 lambda 表达式中，因为赋值语句破坏了 b 的 final 属性</span></div><div class=\"line\">b.foreach(inta -&gt; a.add(inta))                  <span class=\"comment\">// 这样是允许的，因为列表的 add 操作并不会修改链表本身的值（考虑 Java 虚拟机实现）</span></div><div class=\"line\"><span class=\"keyword\">final</span> Integer intb;</div><div class=\"line\">b.foreach(inta -&gt; intb = inta)                  <span class=\"comment\">// 错误，lambda 表达式不能修改外部的值</span></div><div class=\"line\">b.foreach(inta -&gt; inta = intb)                  <span class=\"comment\">// 正确，lambda 表达式可以修改内部的值</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>lambda 表达式是 Java 8 引入的新特性，但是其并没有影响 Java 语言的实现，说到底，lambda 表达式只是一个语法糖，提高大家写代码的速度和效率，同时为大家提供便利。<br>lambda 表达式是编程模型上的一种提升，赋予了 Java 缺失的函数式编程的特性。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ol>\n<li><a href=\"http://blog.oneapm.com/apm-tech/226.html\" target=\"_blank\" rel=\"external\">深入浅出 Java 8 Lambda 表达式</a></li>\n<li><a href=\"https://zeroturnaround.com/rebellabs/java-8-the-first-taste-of-lambdas/\" target=\"_blank\" rel=\"external\">Java 8: The First Taste of Lambdas</a></li>\n<li><a href=\"http://www.jianshu.com/p/141cf822cb70\" target=\"_blank\" rel=\"external\">Java8 Lambda表达式</a></li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj7ln1x6a0001swps0skwgclt","category_id":"cj7ln1x6f0002swps707e0fhu","_id":"cj7ln1x6n0008swpsjwmzvieu"},{"post_id":"cj7ln1x6a0001swps0skwgclt","category_id":"cj7ln1x6j0005swps1enef01v","_id":"cj7ln1x6o0009swpsawxed2ks"}],"PostTag":[{"post_id":"cj7ln1x6a0001swps0skwgclt","tag_id":"cj7ln1x6h0003swpsqwrcd06r","_id":"cj7ln1x6l0006swpslntcregj"},{"post_id":"cj7ln1x6a0001swps0skwgclt","tag_id":"cj7ln1x6j0004swpsxxsdqg6t","_id":"cj7ln1x6m0007swpschsw5m92"}],"Tag":[{"name":"JAVA8","_id":"cj7ln1x6h0003swpsqwrcd06r"},{"name":"lambda","_id":"cj7ln1x6j0004swpsxxsdqg6t"}]}}